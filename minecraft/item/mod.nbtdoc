use ::util::attribute::Attribute;
use ::util::slot::Slot;

/// The base NBT of all items
compound ItemBase {
	/// The damage that an item has. Only used for tools, armor, etc
	Damage: int,
	/// Whether the item should be unbreakable
	/// Only used for tools, armor, etc
	Unbreakable: boolean
	/// A list of the blocks that can be destoryed by this item when holding it in adventure mode
	CanDestroy: [id(blocks)]
	/// A tag that A tag that describes the custom model an item will take.  
	/// Gets used by the `custom_model_data` model predicate
	CustomModelData: int,
	/// A list of enchantments that are on the item
	Enchantments: [Enchantment],
	/// NUmber of levels to add to the cost when using this in an anvil
	RepairCost: int,
	/// Attribute modifiers to apply while this item is being worn, held, etc
	AttributeModifiers: [AttributeModifier],
	/// The display settings of the item
	display: Display,
	/// Bitfield for which flags to hide on an item  
	/// 1 -> `Enchantments`  
	/// 2 -> `AttributeModifiers`  
	/// 4 -> `Unbreakable`  
	/// 8 -> `CanDestroy`  
	/// 16 -> `CanPlaceOn` (for block items)  
	/// 32 -> other misc info
	HideFlags: int
}

ItemBase describes items;

/// An individual enchantment, with ID and level
compound Enchantment {
	/// Which enchantment is being described
	id: id(minecraft:enchantment),
	/// Which level the enchantment is
	lvl: int @ 1..
}

/// A single attribute modifier
compound AttributeModifier {
	/// The name of the attribute
	AttributeName: Attribute,
	/// Name of the modifier, has no real effect
	Name: string,
	/// The slot that the modifier is active in
	Slot: Slot,
	/// The modifier operation
	Operation: Operation,
	/// The change in the attribute
	Amount: double,
	/// Upper bits of the modifiers uuid
	UUIDMost: long,
	/// Lower bits of the modifiers uuid
	UUIDLeast: long
}

/// A modifier operation
enum(int) Operation {
	/// Adds all of the modifiers' amounts to the current value of the attribute
	Additive = 0,
	/// Multiplies the current value of the attribute by (1 + x),
	/// where x is the sum of the modifiers' amounts.
	Multiplicative = 1,
	/// For every modifier, multiplies the current value of the attribute by (1 + x),
	/// where x is the amount of the particular modifier.
	/// Functions the same as Operation 1 if there is only a single modifier with operation 1 or 2.
	/// However, for multiple modifiers it will multiply the modifiers rather than adding them
	Percentage = 2
}

/// The display settings of an item
compound Display {
	/// The name of an item, as a JSON text component
	Name: string,
	/// The lore of an item, with each element being a lore line
	Lore: [string]
}