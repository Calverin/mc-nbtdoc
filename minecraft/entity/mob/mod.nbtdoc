use ::minecraft::util::attribute::Attribute;
use ::minecraft::util::effect::PotionEffect;
use ::minecraft::item::inventory::InventoryItem;

/// Base NBT for all mobs
compound MobBase extends super::EntityBase {
	/// How much health the entity has
	Health: float,
	/// How much absorbtion health the entity has
	AbsorbtionAmount: float,
	/// Timer since the mob has been damaged  
	/// Counts down to zero
	HurtTime: short,
	/// Number of ticks since the mob was last damaged, from its creation
	HurtByTimestamp: int,
	/// Timer since the mob was marked as dead  
	/// Counts down to zero
	DeathTime: short,
	/// Whether the mob will glide when it falls
	FallFlying: boolean,
	/// `x` coordinate of where the mob is sleeping
	SleepingX: int,
	/// `y` coordinate of where the mob is sleeping
	SleepingY: int,
	/// `z` coordinate of where the mob is sleeping
	SleepingZ: int,
	/// The mob's brain, empty
	Brain: Brain,
	/// The mob's attributes
	Attributes: [Attribute],
	/// The active potion effects on the mob
	ActiveEffects: [PotionEffect],
	/// The items that the mob is holding, in [main hand, offhand]
	HandItems: [InventoryItem] @ 2,
	/// The items that the mob is wearing, in [head, body, legs, feet]
	ArmorItems: [InventoryItem] @ 4,
	/// The chance to drop the items that the mob is holding, in [main hand, offhand]
	HandDropChances: [float] @ 2,
	/// The chance to drop the items that the mob is wearing, in [head, body, legs, feet]
	ArmorDropChances: [float] @ 4,
	/// The mob's death loot table
	DeathLootTable: id(minecraft:loot_table),
	/// The seed for generating the death loot table
	DeathLootTableSeed: long,
	/// Wether the mob can pick up loot
	CanPickUpLoot: boolean,
	/// Whether the mob should have an AI
	NoAI: boolean,
	/// Whether the mob should not despawn naturally
	PersistenceRequired: boolean,
	/// Whether the mob is left handed
	LeftHanded: boolean,
	/// The team to join when the mob is spawned
	Team: string,
	/// Whether the mob is leashed
	Leashed: boolean,
	/// What the leash is attached to
	Leash: (UUIDLeash | BlockLeash)
}

/// A single attribute
compound Attribute {
	/// The name of the attribute
	Name: Attribute,
	/// The base value of the attribute
	Base: double,
	/// The modifiers that act on the attribute
	Modifiers: [AttributeModifier]
}

/// A single attribute modifier
compound AttributeModifier {
	/// Name of the modifier, has no real effect
	Name: string,
	/// The slot that the modifier is active in
	Slot: Slot,
	/// The modifier operation
	Operation: Operation,
	/// The change in the attribute
	Amount: double,
	/// Upper bits of the modifiers uuid
	UUIDMost: long,
	/// Lower bits of the modifiers uuid
	UUIDLeast: long
}

compound Brain {
	/// The mobs memories, empty
	memories: Memories
}

compound Memories {}

compound UUIDLeash {
	/// UUIDMost of other entity leash is attached to
	UUIDMost: long,
	/// UUIDLeast of other entity leash is attached to
	UUIDLeast: long
}

compound BlockLeash {
	/// `x` coordiante of leash knot
	X: int,
	/// `y` coordiante of leash knot
	Y: int,
	/// `z` coordiante of leash knot
	Z: int
}